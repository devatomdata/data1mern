[
    {
       "Introduction to React": [
            "What is React?",
            "React is a JavaScript library created by Facebook.\nIts featues:\n1. React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.\n2. Build encapsulated components that manage their own state, then compose them to make complex UIs.\n3. We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.",
            "How does React Work?",
            "React creates a VIRTUAL DOM in memory.\n\nInstead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.\n\nReact only changes what needs to be changed!\n\nReact finds out what changes have been made, and changes only what needs to be changed."
        ],
        "Setup guide": [
            "Node and npm",
            "Verify your versions of node and npm on the command line.If node and npm is not installed please reffer to NodeJs tutorial and check installation step for the same.",
            "Create the Root Folder",
            "Create a folder with name reactApp on the desktop to install all the required files.o create any module, it is required to generate the package.json file. Therefore, after Creating the folder, we need to create a package.json file. To do so you need to run the npm init command from the command prompt.This command asks information about the module such as packagename, description, author etc. you can skip these using the –y option.",
            "Install React and react dom",
            "Since our main task is to install ReactJS, install it, and its dom packages, using install react and react-dom commands of npm respectively. You can add the packages we install, to package.json file using the --save option.\n\nC:\\Users\\DevAtom\\Desktop\\reactApp>npm install react --save\nC:\\Users\\DevAtom\\Desktop\\reactApp>npm install react-dom --save\nOr, you can install all of them in single command as −\n\nC:\\Users\\DevAtom\\Desktop\\reactApp>npm install react react-dom --save",
            "create-react-app command",
            "Browse through the desktop and install the Create React App using command prompt as shown below −\n\nC:\\Users\\DevAtom>cd C:\\Users\\DevAtom\\Desktop\\\nC:\\Users\\DevAtom\\Desktop>npx create-react-app my-app\nThis will create a folder named my-app on the desktop and installs all the required files in it.",
            "Run the project",
            "Finally, run the project using the start command.\n\nnpm start"
        ],
        "Introduction to JSX": [
            "",
            "Now we will get to know JSX, the syntax in React. As mentioned before, create-react-app has already bootstrapped a basic application for you, and all files come with their own default implementations. For now, the only file we will modify is the src/App.js file.\n\nsrc/App.js\n\n\nimport React, { Component } from 'react';\n\nimport logo from './logo.svg';\n\nimport './App.css';\n\nclass App extends Component {\n\nrender() {\n\nreturn (\n\n<div className=\"App\">\n\n<header className=\"App-header\">\n\n<img src={logo} className=\"App-logo\" alt=\"logo\" /> <p>\n\nEdit <code>src/App.js</code> and save to reload.\n\n</p>\n\n<a\n\nclassName=\"App-link\"\n\nhref=\"https://reactjs.org\"\n\ntarget=\"_blank\"\n\nrel=\"noopener noreferrer\"\n\n>\n\nLearn React\n\n</a>\n\n</header>\n\n</div>\n\n);\n\n}\n\n}\n\nexport default App;\n\n\n\nDon’t worry if you’re confused by the import/export statements and class declaration now. These are features of JavaScript ES6 we will revisit in a later chapter.\n\nIn the file you should see a React ES6 class component with the name App. This is a component declaration. After you have declared a component, you can use it as an element anywhere in your application. It will produce an instance of your component or, in other words, the component gets instantiated.\nCode Playground\n\n\n//\tcomponent declaration class App extends Component {\n...\n\n}\n\n//\tcomponent usage (also called instantiation for a class)\n\n//\tcreates an instance of the component\n\n<App />\n\n\n\nThe returned element is specified in the render() method. The components you instantiated earlier are made up of elements, so it is important to understand the differences between a component, an instance of a component, and an element.\n\nYou should see where the App component is instantiated, else you couldn’t see the rendered output in a browser. The App component is only the declaration, but not the usage. You can instantiate the component anywhere in your JSX with <App />. You will see later where this happens in this application.\n\nThe content in the render block may look similar to HTML, but it is actually JSX. JSX allows you to mix HTML and JavaScript. It is powerful, but it can be confusing when you are used to separating the two languages. It is a good idea to start by using basic HTML in your JSX. Open the App.js file and remove all unnecessary HTML code as shown:\n\nsrc/App.js\n\n\nimport React, { Component } from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n\nrender() {\n\nreturn (\n\n<div className=\"App\">\n\n<h2>Welcome to the Road to learn React</h2> </div>\n\n);\n\n}\n\n}\n\nexport default App;\n\n\n\nNow, you only return HTML in your render() method without any JavaScript. Let’s define the “Welcome to the Road to learn React” as a variable. A variable is set in JSX by curly braces.\n \nsrc/App.js\n\n\nimport React, { Component } from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n\nrender() {\n\nvar helloWorld = 'Welcome to the Road to learn React';\n\nreturn (\n\n<div className=\"App\">\n\n<h2>{helloWorld}</h2>\n\n</div>\n\n);\n\n}\n\n}\n\nexport default App;\n\n\n\nStart your application on the command line with npm start to verify the changes you’ve made.\n\nYou might have noticed the className attribute. It reflects the standard class attribute in HTML. JSX had replaced a handful of internal HTML attributes, but you can find all the supported HTML attributes in React’s documentation⁵⁴, which all follow the camelCase convention. On your way to learn React, expect to run across more JSX specific attributes.\n",
            "ReactDOM",
            "The App component is located in your entry point to the React world: the src/index.js file.\n\nsrc/index.js\n\n\nimport React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n\n<App />,\n\ndocument.getElementById('root')\n\n);\n\n\n\nReactDOM.render() uses a DOM node in your HTML to replace it with JSX. It’s a way to integrate React in any foreign application easily, and you can use ReactDOM.render() multiple times across your application. You can use it to bootstrap simple JSX syntax, a React component, multiple React components, or an entire application. In a plain React application, you would only use it once to bootstrap the component tree.\n\nReactDOM.render() expects two arguments. The first argument is for rendering the JSX. The second argument specifies the place where the React application hooks into your HTML. It expects an element with an id='root', found in the public/index.html file.\n\nCode Playground\n\n\nReactDOM.render(\n\n<h1>Hello React World</h1>,\n\ndocument.getElementById('root')\n\n);\n\n\n\nDuring implementation, ReactDOM.render() takes your App component, though it can also pass simple JSX. It doesn’t require a component instance.\n"
        ],
        "Components": [
            "Stateless Example",
            "App.jsx\n\n\nimport React from 'react';\n\nclass App extends React.Component {\n   render() {\n      return (\n         <div>\n            <Header/>\n            <Content/>\n         </div>\n      );\n   }\n}\nclass Header extends React.Component {\n   render() {\n      return (\n         <div>\n            <h1>Header</h1>\n         </div>\n      );\n   }\n}\nclass Content extends React.Component {\n   render() {\n      return (\n         <div>\n            <h2>Content</h2>\n            <p>The content text!!!</p>\n         </div>\n      );\n   }\n}\nexport default App;",
            "Our first component in the following example is App. This component is owner of Header and Content. We are creating Header and Content separately and just adding it inside JSX tree in our App component. Only App component needs to be exported.To be able to render this on the page, we need to import it in main.js file and call reactDOM.render(). We already did this while setting the environment.",
            "Stateful Example",
            "App.jsx\n\n\nimport React from 'react';\n\nclass App extends React.Component {\n   constructor() {\n      super();\n      this.state = {\n         data: \n         [\n            {\n               \"id\":1,\n               \"name\":\"Foo\",\n               \"age\":\"20\"\n            },\n            {\n               \"id\":2,\n               \"name\":\"Bar\",\n               \"age\":\"30\"\n            },\n            {\n               \"id\":3,\n               \"name\":\"Baz\",\n               \"age\":\"40\"\n            }\n         ]\n      }\n   }\n   render() {\n      return (\n         <div>\n            <Header/>\n            <table>\n               <tbody>\n                  {this.state.data.map((person, i) => <TableRow key = {i} \n                     data = {person} />)}\n               </tbody>\n            </table>\n         </div>\n      );\n   }\n}\nclass Header extends React.Component {\n   render() {\n      return (\n         <div>\n            <h1>Header</h1>\n         </div>\n      );\n   }\n}\nclass TableRow extends React.Component {\n   render() {\n      return (\n         <tr>\n            <td>{this.props.data.id}</td>\n            <td>{this.props.data.name}</td>\n            <td>{this.props.data.age}</td>\n         </tr>\n      );\n   }\n}\nexport default App;",
            "In this example, we will set the state for owner component (App). The Header component is just added like in the last example since it doesn't need any state. Instead of content tag, we are creating table and tbody elements, where we will dynamically insert TableRow for every object from the data array.\n\nIt can be seen that we are using EcmaScript 2015 arrow syntax (=>) which looks much cleaner than the old JavaScript syntax. This will help us create our elements with fewer lines of code. It is especially useful when we need to create a list with a lot of items.\n\nNote − Notice that we are using key = {i} inside map() function. This will help React to update only the necessary elements instead of re-rendering the entire list when something changes. It is a huge performance boost for larger number of dynamically created elements.",
            "main.js file for both Stateless and Stateful Example",
            "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(<App/>, document.getElementById('app'));"
        ],
        "Local Component State": [
            "State in a Component",
            "src/App.js\n\n\nclass App extends Component {\n\nconstructor(props) {\n\nsuper(props);\n\n}\n\n...\n\n}\n",
            "Local component state, also known as internal component state, allows you to save, modify, and delete properties stored in your component. The ES6 class component then uses a constructor to initialize local component state. The constructor is called only once, when the component initializes",
            "Set value in state",
            "src/App.js\n\n\nconst list = [\n\n{\n\ntitle: 'React',\n\nurl: 'https://reactjs.org/',\n\nauthor: 'Jordan Walke',\n\nnum_comments: 3,\n\npoints: 4,\n\nobjectID: 0,\n\n},\n\n...\n\n];\n\nclass App extends Component {\n\nconstructor(props) {\n\nsuper(props);\n \nthis.state = {\n\nlist: list,\n\n};\n\n}\n\n...\n\n}\n",
            "The App component is a subclass of Component, so the extends Component is in the App component declaration.\n\nIt is mandatory to call super(props);. It sets this.props in your constructor in case you want to access them there. They would be undefined when accessing this.props in your constructor otherwise. In this case, the initial state of the component should be the sample list of items\n",
            "Display values",
            "src/App.js\n\n\nclass App extends Component {\n\n...\n\nrender() {\n\nreturn (\n\n<div className=\"App\">\n\n{this.state.list.map(item =>\n\n<div key={item.objectID}>\n\n<span>\n\n<a href={item.url}>{item.title}</a>\n\n</span>\n\n<span>{item.author}</span>\n\n<span>{item.num_comments}</span>\n\n<span>{item.points}</span>\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n}",
            "\nThe state is bound to the class using the this object, so you can access the local state of the whole component. For instance, it can be used in the render() method. Previously you have mapped a static list of items in your render() method that was defined outside of your component. Now you are about to use the list from your local state in your component.\n\nThe list is part of the component now, in the local component state. You could add, change, or remove items from your list. Every time you change your component state, the render() method of your component will run again. That’s how you can change your local component state and see the component re-render the correct data from the local state.Be careful not to mutate the state directly. Instead, you should use a method called setState() to modify your states"
        ]
    }
]
